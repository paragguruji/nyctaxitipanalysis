/*Source Code for NYC Green Taxi Analysis for Sept. 2015 - A hobby project with SAS
*/
/*
Author: Parag Guruji
Affiliation: Purdue University, West Lafayette, IN, USA
Email: pguruji@purdue.edu
Cell: +1-765-775-8727
*/

/*Set dataurl filename to the source URL for raw data*/
filename dataurl url 'https://s3.amazonaws.com/nyc-tlc/trip+data/green_tripdata_2015-09.csv';
/*This dataset is assumed to always have the same format as of the given raw dataset*/

/*Set filename for cleaned training dataset*/
filename Q4ClTrDt 'W:\tip_prediction\cleaned_training_data.csv';
/*Question_4_Cleaned_Training_Data: This dataset is cleaned and processed training dataset*/

/*Set filename for inputting raw test data*/
filename Q4RwTsDt 'W:\tip_prediction\raw_test_data.csv';
/*Question_4_Raw_Test_Data: This dataset is assumed to always have the same format as of the given raw dataset*/

/*Set filename for cleaned and preprocessed test dataset*/
filename Q4ClTsDt 'W:\tip_prediction\cleaned_test_data.csv';
/*Question_4_Cleaned_Test_Data: If your data is in the same form as the dataurl input data, use the Q4RwTsDt instead.*/

/*Set filename for saving the trained model*/
filename Q4TrdMdl 'W:\tip_prediction\model_trained_on_pickup.csv';
/*Question_4_Trained_Model:*/

/*Set filename for output data generated by running the proposed model (usually referred to as 'model')*/
filename Q4MdlOp 'W:\tip_prediction\output_of_model.csv';
/*Question_4_Model_Output:*/

/*Set filename for output data generated by running the baseline model (usually referred to as 'baseline')*/
filename Q4BslOp 'W:\tip_prediction\output_of_baseline.csv';
/*Question_4_Baseline_Output:*/

/*Set filename for baseline performance evaluation results dataset*/
filename Q4BslPrf 'W:\tip_prediction\baseline_performance.csv';
/*Question_4_Baseline_Performance:*/

/*Set filename for model performance evaluation results dataset*/
filename Q4MdlPrf 'W:\tip_prediction\model_performance.csv';
/*Question_4_Model_Performance:*/


/*Q1*/
/*Import CSV file from source specified by DATAURL into the dataset WORK.raw_dataset */
proc import file=dataurl
			DBMS=CSV
			out=raw_dataset
			replace;
	delimiter=',';
	getnames=yes;
run;

/*Debugging*/
/*Visually check if the data loaded as expected by printing first 10 observations*/
/*proc print data=raw_dataset(obs=10);
run;
*/



/*Q2*/
/*Plot Histogram of Trip_distance*/
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Histogram of Trip Distance - Raw';
title3 'by Parag Guruji pguruji@purdue.edu';

proc univariate data=raw_dataset /*noprint*/;
	var Trip_distance;
	histogram Trip_distance / endpoints =(0 to 605 by 5);
run;

/*
We observe from the histogram and the numerical summary of Trip_distance that:
1. The distribution is heavily right skewed
2. The first 99% Quantiles are in range 0 to 14.77 and last 1% quantiles in 14.77 to 603.10
3. by the Q3 + 1.5(IQR) measure, all observations above 7.7 can be termed as outliers which is more than 10% of the data
For the practical reason of facilitating a closer look at the shape of distribution of the maximum possible chunk of the data (99% quantiles),
we eliminate the extreme right 1% quantiles to get a derived dataset for ploting a histogram.
*/
data data99quantile(keep=Trip_distance trip_dist99); set raw_dataset;
	trip_dist99 = Trip_distance;
	if trip_dist99 > 14.77 then trip_dist99= .;
run;

/*Plot Histogram of trip_dist99, i.e. the Trip_distance variable in the 99% quantile subset of the original data*/
proc univariate data=data99quantile /*noprint*/;
	var trip_dist99;
	histogram trip_dist99 / endpoints =(0.0 to 15 by 1) barlabels=percent;
run;


/*
From the data, we observe that the Trip_distance variable takes values over a range of multi-order magnitudes from min. 0.01 to max. 603.1 (= 60310*min.)
The histogram of subset comprizing of first 99% quantiles also shows logarithmic fall in percent frequency over Trip_distance
Thus, it is of interest to log-transform the data and explore the resultant shape.

Hence, we create a new dataset 'logified_trip_distance' where 'Trip_distance' is log transformed as 'log10_Trip_distance'
log10_Trip_distance = log10(Trip_distance + 0.001)
*/
data logified_trip_distance(keep=Trip_distance log10_Trip_distance); set raw_dataset;
	log10_Trip_distance = log10(Trip_distance + 0.001);
run;

title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Histogram of log-transformed Trip_distance i.e. log10(Trip Distance + 0.001)';
title3 'by Parag Guruji pguruji@purdue.edu';

/*Plot Histogram of log10_Trip_distance*/
proc univariate data=logified_trip_distance noprint;
	var log10_Trip_distance;
	histogram log10_Trip_distance / endpoints =(-3 to +3 by 0.5) /*normal*/ barlabel=percent;
run;


/*Q3*/
/*Q3. 1. Mean Trip_distance grouped by hour of day*/
/*Compute variable 'hour of day' from the pickup timestamp of trip-transaction*/
data trips_by_hour(keep=lpep_pickup_datetime Trip_distance hour_of_day); set raw_dataset;
	hour_of_day=HOUR(lpep_pickup_datetime);
run;

/*Debugging*/
/*
proc print data=trips_by_hour(obs=10);
run;
*/

/*Compute the means and medians for trip_distances grouped by their Pickup hour*/
proc means data=trips_by_hour MEAN MEDIAN noprint;
	class hour_of_day;
	var Trip_distance;
	output out=means_output mean=hourly_mean median=hourly_median;
run;

data hourly_mean_trip_dist; set means_output;
	if _TYPE_ = 0 then delete;
	drop _FREQ_ _TYPE_;
run;

proc print data=hourly_mean_trip_dist;
	title1 'Green Taxi Trip Data Analysis for Sept. 2015';
	title2 'Summary of hourly mean trip distance';
	title3 'by Parag Guruji pguruji@purdue.edu';
run;



/*Q3. 2. Analysis of Airport Trips*/
/*Identify the airport trips and derive following pieces of information- 
	1. Is airport trip? - The trip which either starts or ends within a radius of 1 Km 
		from the location point either of the 3 NYC airports as specified by their geo-coordinates
	2. Which airport/(s)
	3. In-bound or out-bound or both
	
	For this, we create 3 varables:
	1. airport: {Y, N} - is this an airport trip? Y=yes, N=no
	2. pickup: {JFKA, LGA, NLIA, OTHER} - specifies pickup location as either of 3 airports or OTHER
	3. dropoff: {JFKA, LGA, NLIA, OTHER} - specifies pickup location as either of 3 airports or OTHER
*/
data airport_trips; 
	set raw_dataset;
	trip_id = _n_;
	pickup = 'OTHER';
	dropoff = 'OTHER';
	airport = 'Y';
	/*Pickup within 1 km of the coordinates of LaGuardia Airport*/
	if 	geodist(Pickup_latitude, Pickup_longitude, 40.77725, -73.872611, 'K') <= 1 then do;	
		pickup = 'LGA';
		end;
	else do;
		/*Pickup within 1 km of the coordinates of John F. Kennedy International Airport*/
		if 	geodist(Pickup_latitude, Pickup_longitude, 40.639722, -73.778889, 'K') <= 1 then do;
			pickup = 'JFKIA';
			end;
		else do;
			/*Pickup within 1 km of the coordinates of Newark Liberty International Airport*/
			if	geodist(Pickup_latitude, Pickup_longitude, 40.6925, -74.168611, 'K') <= 1 then do;
				pickup = 'NLIA';
				end;
			end;
		end;
	/*Dropoff within 1 km of the coordinates of LaGuardia Airport*/
	if 	geodist(Dropoff_latitude, Dropoff_longitude, 40.77725, -73.872611, 'K') <= 1 then do;	
		dropoff = 'LGA';
		end;
	else do;
		/*Dropoff within 1 km of the coordinates of John F. Kennedy International Airport*/
		if 	geodist(Dropoff_latitude, Dropoff_longitude, 40.639722, -73.778889, 'K') <= 1 then do;
			dropoff = 'JFKIA';
			end;
		else do;
			/*Dropoff within 1 km of the coordinates of Newark Liberty International Airport*/
			if	geodist(Dropoff_latitude, Dropoff_longitude, 40.6925, -74.168611, 'K') <= 1 then do;
				dropoff = 'NLIA';
				end;
			end;
		end;
	/*split the dataset in two datasets - airport_trips and other_trips*/
	if pickup = 'OTHER' and dropoff = 'OTHER' then do; airport='N'; end;
run;


proc print data=cleaned_airport_trips(obs=20);
run;

proc sort data=cleaned_airport_trips;
	by airport;
run;




title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Count of trips that are either in-bound or out-bound to any of 3 NYC area airports';
title3 'by Parag Guruji pguruji@purdue.edu';

/*Count no. of airport trips*/
proc sql;
  select count(*) as Airport_trips_count
  from airport_trips
  where airport='Y';
quit; 

/*Cleaning Airport Trips data for summary analysis*/
data cleaned_airport_trips; set airport_trips;
	if Fare_amount < 1 OR Trip_distance < 1 OR Payment_type NE 1
		OR Dropoff_latitude = 0 OR Dropoff_longitude = 0 OR Pickup_latitude = 0 OR Pickup_longitude = 0 then delete;
	Fare_per_distance = Fare_amount/Trip_distance;
	Tip_as_percent_fare = FLOOR(100*Tip_amount/Fare_amount);
run;

/*Generate Summary (mean & median along with 95% confidence intervals) for airport trips 
	w.r.t. their: Fare amount, Trip distance and Tip amount*/
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Summary of Characteristics: Airport Trips VS Other Trips';
title3 'by Parag Guruji pguruji@purdue.edu';

proc means data=cleaned_airport_trips MEAN CLM MEDIAN MODE;
	class airport;
	var Fare_amount Trip_distance Tip_amount Fare_per_distance Tip_as_percent_fare;
run;

/*
Compare if - on an average, the characteristics of airport trips are significantly different from those of other trips.
	characteristics to be compared:
	1. Fare amount 
	2. Trip distance 
	3. Tip_amount 
	4. Fare_per_distance
	5. Tip_as_percent_fare
*/
proc ttest data=cleaned_airport_trips sides=2 alpha=0.05 H0=0;
 	title "Two sample t-test on  mean Fare amount Airport Trips vs Other Trips";
 	class airport; 
	var Fare_amount Trip_distance Tip_amount Fare_per_distance Tip_as_percent_fare;
run;



/*Q4*/
/*1. Feature design, 2. Predictive Modeling*/


/* 
STEP1 begin
*/ 
/*create a GTL template that displays a scatter plot with highly transperant markers 
colored according to values of given continuous variable [Blue to Red increasingly]*/
proc template;
  define statgraph gradientplot;
  dynamic _X _Y _Z _T;
  mvar LEGENDTITLE "optional title for legend";
    begingraph; 
      entrytitle _T; 
      layout overlay; 	 
        scatterplot x=_X y=_Y / 
          markercolorgradient=_Z colormodel=(BLUE GREEN YELLOW RED)
          markerattrs=(symbol=SquareFilled size=3) transparency=0.98 name="scatter";
        continuouslegend "scatter" / title=LEGENDTITLE;
      endlayout;	
    endgraph;
  end;
run;
/*Template ends*/
/* 
STEP1 end
*/ 


/*
STEP2 begin
*/
/*Assumption for total fare:
	Total Fare = Fare + Extra + Taxes + Surcharge + Fee + Tolls = Total amount - Tip amount*/
/*Observations and assumptions in data cleaning:
	1. Most of the data with all payment types except credit cards (1) is either erroneous, inconsistent, missing or extreme.
		e.g. 0 or negative values in trip distances, fare amount, total amount etc. may represent variety of scenarios:
		including but not limited to: passanger-disputes, availing of special offers/discounts, missing/erroneous data, etc.
		Hence, only payment type 1 is considered valid for this analysis.
	2. To keep visualizations meaningfully large enough, obervations in far-away outskirts of the city which are in very tiny number are ignored
	3. Observations which show logical inconsistencies such as total amount < fare amount are ignored.
	4. Outliers and extreme observations in terms of Tip_as_percent_total_fare beyond 50% are removed after careful observation 
		since 99.5 quantiles of observations lie within 0 to 40
	5. Trips with time recorded as more than 200 minutes are ignored - few have more than 20hours of trip time 
		which doesn't help (rather harms by influencing) analysis about routine taxi trips - such cases may be analysed separately.
	6. Average trip speed records were found to have illogical extremes such as speeds very close to zero and above 1000mph. 
		The NYC taxi speed guideline is of 25mph. We assume the speed limit in between 5 and 40 mph.
	7. The area under consideration is deliniated in between latitudes 40.55 and 40.95 and longitudes -74.1 and -73.7 
		and is divided into 100X100 matrix, whose each cell gets a code which is an integer representing the serial number of that cell 
		when measured from left to right and bottom to top, staring at bottom-left. Each cell represents approximately 1000ft.X1000ft. area on ground
	8. Each trip is assigned a pickup and a dropoff area code in which the respective coordinates of that trip will fall.
	
	Derived features generated:
	1. Trip id: unique number for the record
	2. Total_fare: as give in assumption above
	3. Tip_as_percent_total_fare:  (Tip_amount/Total_fare)*100;
	4. Trip_minutes: Time spent in taxi (in min.)
	5. Trip_speed: average speed over the course of the trip
	6. Hour_of_day: {0, ..., 23} the hourly timeslot of pickup time
	7. Pickup_area_code: area code for pickup location as explained above
	8. Dropoff_area_code: area code for dropoff location as explained above
*/
/*Clean and preprocess data
*/
data cleaned_training_data; 
	set raw_dataset;
	Trip_id = _n_;
	if (Payment_type NE 1) OR (Fare_amount <= 0) OR (Total_amount <= 0) OR Trip_distance < 1
		OR Pickup_latitude < 40.55 OR Pickup_latitude > 40.95 OR Pickup_longitude < -74.1 OR Pickup_longitude > -73.7
		OR Dropoff_latitude < 40.55 OR Dropoff_latitude > 40.95 OR Dropoff_longitude < -74.1 OR Dropoff_longitude > -73.7 
		OR Extra < 0 OR MTA_tax < 0 OR Tip_amount < 0 OR Tolls_amount < 0 OR improvement_surcharge < 0
	then delete;
	else do;
		Total_fare = Total_amount - Tip_amount;
		if Total_fare <= 0 OR Total_fare > 200 then do; delete; end;
		else; do;
			Tip_as_percent_total_fare = 100*Tip_amount/Total_fare;
			if Tip_as_percent_total_fare > 50 then do; delete; end;
			else; do;
				Trip_minutes = FLOOR( (Lpep_dropoff_datetime - Lpep_pickup_datetime)/60 );
				if Trip_minutes < 1 OR Trip_minutes > 200 then do; delete; end;
				else; do;
					Trip_speed = ( Trip_distance / (Trip_minutes/60) );
					if Trip_speed < 5 OR Trip_speed > 40 then do; delete; end;
					else; do;
						Hour_of_day=HOUR(Lpep_pickup_datetime);
						Pickup_area_code = (100 * FLOOR((Pickup_latitude - 40.55)/0.004)) 
											+ CEIL((74.1 + Pickup_longitude)/0.004);
						Dropoff_area_code = (100 * FLOOR((Dropoff_latitude - 40.55)/0.004)) 
											+ CEIL((74.1 + Dropoff_longitude)/0.004);
					end;
				end;
			end;
		end;
	end;
run;

/*USE FOR TAINING DATA: Save cleaned training dataset to the specified file-path given by Q4ClTrDt*/
proc export data=cleaned_training_data
    outfile=Q4ClTrDt /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP2 end
*/


/*Code for Exploratary Analysis*/
/*Scatterplots for relationship of Tip_as_percent_total_fare with different potential predictor variables*/
proc surveyselect data=cleaned_training_data method=srs n=100000 out=plotting_sample noprint;
run;
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title3 'By Parag Guruji pguruji@purdue.edu';

/*Tip_as_percent_total_fare vs Total Fare*/
title2 'Exploratory Analysis: Tip_as_percent_total_fare vs Total Fare';
proc sgplot data=plotting_sample;
	scatter y=Tip_as_percent_total_fare x=Total_fare;
run;


/*Tip_as_percent_total_fare vs logified_total_fare*/
title2 'Exploratory Analysis: Tip_as_percent_total_fare vs Logified_total_fare';
data logified_x_var; set plotting_sample;
	logified_total_fare = log10(Total_fare);
run;

proc sgplot data=logified_x_var;
	scatter y=Tip_as_percent_total_fare x=logified_total_fare;
run;


/*Tip_as_percent_total_fare vs Trip_minutes i.e. time spent in the taxi - with the driver*/
title2 'Exploratory Analysis: Tip_as_percent_total_fare vs Trip_minutes';
proc sgplot data=plotting_sample;
	scatter y=Tip_as_percent_total_fare x=Trip_minutes;
run;


/*Tip_as_percent_total_fare vs Trip_speed*/
title2 'Exploratory Analysis: Tip_as_percent_total_fare vs Trip_speed';
proc sgplot data=plotting_sample;
	scatter y=Tip_as_percent_total_fare x=Trip_speed;
run;
/*Exploratary Analysis Code Ends*/


/*
STEP3 begin
*/

/*Visualization of Training Data:
	Plot Training Data on the area-map with marker color changing from blue to red with increase in our response variable
	i.e. the tip as percentage of total fare*/
proc import file=Q4ClTrDt
			DBMS=CSV
			out=cleaned_training_data
			replace;
	delimiter=',';
	getnames=yes;
run;

proc sort data=cleaned_training_data;
	by Tip_as_percent_total_fare;
run;

title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Location Map of Tip as Percent of Fare as per Pickup Points';
title3 'by Parag Guruji pguruji@purdue.edu';
title4 'CAUTION: the data is sorted by Tip_as_percent_total_fare. 
		Hence, the overlaping points showing higher-end color may contain data for lower-end color underneath';

%let LegendTitle = "Tip as % Total Fare";
proc sgrender data=cleaned_training_data template=gradientplot;
   dynamic _X='Pickup_longitude' _Y='Pickup_latitude' _Z='Tip_as_percent_total_fare' _T='Tip as %Fare by Pickups';
run;
/*Plotting ends*/
/*
STEP3 end
*/


/*Model Building Process*/
/*
STEP4 begin
*/
/*1. Generate Global Mean*/
proc univariate data=cleaned_training_data noprint;
	var Tip_as_percent_total_fare;
	output out=univar_op mean=global_mean;
run;

/* Debugging */
/*
proc print data=univar_op;
run;
*/

/*
STEP4 end
*/


/*
STEP5 begin
*/
/*2. Generate area-wise mean for prediction variable - tip as %age of total fare*/
proc summary nway data=cleaned_training_data;
	class Pickup_area_code;
	var Tip_as_percent_total_fare;
	output out=intermediate_output_pickup n=Pickup_count mean=area_mean;
run;

/*
proc print data=intermediate_output_pickup(obs=20);
	title "Intermediate Output from Pickup Area";
run;
*/

/*
STEP5 end
*/


/*
STEP6 begin
*/
/*3. Set the predicted value to the Area-wise mean generated in (2) if we have enough(>50) datapoints for that area,
	otherwise set it to the global mean.*/
data trained_on_pickup; 
	if _n_=1 then set univar_op;
	set intermediate_output_pickup;
	if Pickup_count < 50 
	then pred_tip_by_pickup = global_mean;
	else pred_tip_by_pickup = area_mean;
	Pickup_x = mod(Pickup_area_code, 100);
	Pickup_y = ceil(Pickup_area_code/100);
	drop _FREQ_ _TYPE_;
run;


/*Debugging*/
/*
proc print data=trained_on_pickup(obs=20);
	title "Model Trained on Pickup Area";
run;
*/


proc sort data=trained_on_pickup;
	by pred_tip_by_pickup;
run;


/*Save trained model to the specified file-path given by Q4TrdMdl*/
proc export data=trained_on_pickup
    outfile=Q4TrdMdl /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP6 end
*/


/*
STEP7 begin
*/
/*Import existing trained model*/
proc import file=Q4TrdMdl
			DBMS=CSV
			out=trained_on_pickup
			replace;
	delimiter=',';
	getnames=yes;
run;


/*Plot the area-wise gradient map to visualize our prediction*/
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Area Matrix Map of Learned Prediction Model for Tip as Percent of Fare';
title3 'by Parag Guruji pguruji@purdue.edu';

%let LegendTitle = "Predicted Tip as % Total Fare";
proc sgrender data=trained_on_pickup template=gradientplot;
   dynamic _X='Pickup_x' _Y='Pickup_y' _Z='pred_tip_by_pickup' _T='Prediction of Tip as %Fare by Pickup Area';
run;
/*
STEP7 end
*/
/*Model Building Process Ends*/



/*Test Dataset Preparation*/
/*
STEP8 begin
*/
/*Import the raw Test data*/
proc import file=Q4RwTsDt
			DBMS=CSV
			out=raw_test_data
			replace;
	delimiter=',';
	getnames=yes;
run;
/*
STEP8 end
*/

/*
STEP9 begin
*/
/*Clean and preprocess the test data in same way as done for training data*/
data cleaned_test_data; 
	set raw_test_data;
	Trip_id = _n_;
	if (Payment_type NE 1) OR (Fare_amount <= 0) OR (Total_amount <= 0) OR Trip_distance < 1
		OR Pickup_latitude < 40.55 OR Pickup_latitude > 40.95 OR Pickup_longitude < -74.1 OR Pickup_longitude > -73.7
		OR Dropoff_latitude < 40.55 OR Dropoff_latitude > 40.95 OR Dropoff_longitude < -74.1 OR Dropoff_longitude > -73.7 
		OR Extra < 0 OR MTA_tax < 0 OR Tip_amount < 0 OR Tolls_amount < 0 OR improvement_surcharge < 0
	then delete;
	else do;
		Total_fare = Total_amount - Tip_amount;
		if Total_fare <= 0 OR Total_fare > 200 then do; delete; end;
		else; do;
			Tip_as_percent_total_fare = 100*Tip_amount/Total_fare;
			if Tip_as_percent_total_fare > 50 then do; delete; end;
			else; do;
				Trip_minutes = FLOOR( (Lpep_dropoff_datetime - Lpep_pickup_datetime)/60 );
				if Trip_minutes < 1 OR Trip_minutes > 200 then do; delete; end;
				else; do;
					Trip_speed = ( Trip_distance / (Trip_minutes/60) );
					if Trip_speed < 5 OR Trip_speed > 40 then do; delete; end;
					else; do;
						Hour_of_day=HOUR(Lpep_pickup_datetime);
						Pickup_area_code = (100 * FLOOR((Pickup_latitude - 40.55)/0.004)) 
											+ CEIL((74.1 + Pickup_longitude)/0.004);
						Dropoff_area_code = (100 * FLOOR((Dropoff_latitude - 40.55)/0.004)) 
											+ CEIL((74.1 + Dropoff_longitude)/0.004);
					end;
				end;
			end;
		end;
	end;
run;

proc sort data=cleaned_test_data;
	by Pickup_area_code;
run;

/*Save cleaned dataset to the specified file-path given by Q4ClTsDt*/
proc export data=cleaned_test_data
    outfile=Q4ClTsDt /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP9 end
*/
/*Test Dataset Preparation Ends*/



/*Running the baseline model on test data*/
/*
STEP10 begin
*/
/*Import the existing cleaned and preprocessed Test data*/
proc import file=Q4ClTsDt
			DBMS=CSV
			out=cleaned_test_data
			replace;
	delimiter=',';
	getnames=yes;
run;

proc sort data=cleaned_test_data;
	by Pickup_area_code;
run;

/*
STEP10 end
*/

/*
STEP11 begin
*/
/*Baseline model generation*/
data baseline_global_mean; 
	if _n_=1 then set univar_op;
	set intermediate_output_pickup;
	pred_tip_by_pickup = global_mean;
	Pickup_x = mod(Pickup_area_code, 100);
	Pickup_y = ceil(Pickup_area_code/100);
	drop _FREQ_ _TYPE_;
run;

/*Debugging*/
/*
proc print data=baseline_global_mean;
	title "Baseline Predictions";
run;
*/
/*
STEP11 end
*/
/*Baseline model generation ends*/


/*
STEP12 begin
*/
/*Baseline Evaluation Process*/
proc sort data=baseline_global_mean;
	by Pickup_area_code;
run;

/*Run the baseline model of global mean on test data to generate the output*/
data baseline_evaluation; 
	merge baseline_global_mean cleaned_test_data;
	by Pickup_area_code;
	error_term = pred_tip_by_pickup - Tip_as_percent_total_fare;
	error_sqaured = error_term * error_term;
run;


/*Save the baseline output for test data in Q4BslOp file*/
proc export data=baseline_evaluation
    outfile=Q4BslOp /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP12 end
*/

/*
STEP13 begin
*/
/*Import the existing baseline output for Test data*/
proc import file=Q4BslOp
			DBMS=CSV
			out=baseline_evaluation
			replace;
	delimiter=',';
	getnames=yes;
run;

/*Compute evaluation metric Mean Squared Error MSE for baseline model*/
proc means data=baseline_evaluation;
	var error_sqaured;
	Title "Baseline Performance Evaluation";
	output out=baseline_performance mean=MSE;
run;

/*Save the baseline performance metric MSE in Q4BslPrf*/
proc export data=baseline_performance
    outfile=Q4BslPrf /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP13 end
*/
/*Baseline Evaluation Process Ends*/


/*Model Evaluation Process*/
/*
STEP14 begin
*/
/*Import existing trained model*/
proc import file=Q4TrdMdl
			DBMS=CSV
			out=trained_on_pickup
			replace;
	delimiter=',';
	getnames=yes;
run;

proc sort data=trained_on_pickup;
	by Pickup_area_code;
run;
/*
STEP14 end
*/


/*
STEP15 begin
*/
/*Import the existing cleaned and preprocessed Test data*/
proc import file=Q4ClTsDt
			DBMS=CSV
			out=cleaned_test_data
			replace;
	delimiter=',';
	getnames=yes;
run;

proc sort data=cleaned_test_data;
	by Pickup_area_code;
run;
/*
STEP15 end
*/


/*
STEP16 begin
*/
/*Running the model (trained_on_pickup) on test data*/
data model_evaluation; 
	merge trained_on_pickup cleaned_test_data;
	by Pickup_area_code;
	error_term = pred_tip_by_pickup - Tip_as_percent_total_fare; /*Error = Predicted - Observed*/
	error_sqaured = error_term * error_term; /*error squared*/
run;


/*Save the output of running the model on test data in Q4_output_data file*/
proc export data=model_evaluation
    outfile=Q4MdlOp /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP16 end
*/


/*
STEP17 begin
*/
/*Import the existing output of running the model on test data*/
proc import file=Q4MdlOp
			DBMS=CSV
			out=model_evaluation
			replace;
	delimiter=',';
	getnames=yes;
run;


/*Compute Model's Mean Squared Error MSE*/
proc means data=model_evaluation;
	var error_sqaured;
	Title "Model Performance Evaluation";
	output out=model_performance mean=MSE;
run;


/*Save the model performance metric MSE in Q4MdlPrf*/
proc export data=model_performance
    outfile=Q4MdlPrf /*Set the appropriate file path at the top*/
    dbms=csv
    replace;
run;
/*
STEP17 end
*/
/*Model Evaluation Process Ends*/


/*Q5*/
/*Prepare a lightly cleaned - i.e. cleaned w.r.t. only the variables involved in this question - dataset

Create variables:
1. Trip_minutes: Duration of trip in minutes
2. Trip_speed: Average speed over the course of trip - in MpH
	Trip_speed = ( Trip_distance / (Trip_minutes/60) ) ..... Ans. of first part of the question.
3. Trip_week: week of Sept. {1, 2, 3, 4, 5} in which trip occured.
*/
data speed_by_week; set raw_dataset;
	if Lpep_dropoff_datetime = 0 OR Lpep_pickup_datetime = 0 OR Trip_distance <= 0 then do; delete; end;
	else; do;
		Trip_minutes = FLOOR( (Lpep_dropoff_datetime - Lpep_pickup_datetime)/60 );
		if Trip_minutes < 1 OR Trip_minutes > 200 then do; delete; end;
		else; do;
			Trip_speed = ( Trip_distance / (Trip_minutes/60) );
			if trip_speed > 100 then do; delete; end;
			else; do;
				Trip_week = ceil(day(datepart(lpep_pickup_datetime))/7);
			end;
		end;
	end;
	keep Trip_week Trip_id Trip_speed;
run;

proc sort data = speed_by_week;
	by Trip_week;
run;

/*Compute the average speeds for grouped by week number */
proc means data=speed_by_week;
	class Trip_week;
	var Trip_speed;
run;

/*Side by Side Boxplots*/
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Side by Side Boxplots for Trip Speed in Weeks of Sept. 2015';
title3 'By Parag Guruji pguruji@purdue.edu';
proc boxplot data=speed_by_week;
	plot Trip_speed*Trip_week;
run;


/*ANOVA*/
/*Check the normality*/
/*QQplot*/
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'Side by Side Boxplots for Trip Speed in Weeks of Sept. 2015';
title3 'By Parag Guruji pguruji@purdue.edu';
symbol value = circle i=none;
proc univariate data=speed_by_week noprint;
  var Trip_speed;
  by Trip_week;
  qqplot;
run;

/*Generate the ANOVA table*/
/*Side by Side Boxplots*/
title1 'Green Taxi Trip Data Analysis for Sept. 2015';
title2 'ANOVA for Trip Speed in Weeks of Sept. 2015';
title3 'By Parag Guruji pguruji@purdue.edu';
proc glm data=speed_by_week;
  class Trip_week;
  model Trip_speed = Trip_week;
  means Trip_week / bon lines;
run;



/*Auxilary code for splitting up the Given data set into training and testing in Question 4*/
/*
proc import file='W:\tip_prediction\randomized total clean data.csv'
			DBMS=CSV
			out=total_data
			replace;
	delimiter=',';
	getnames=yes;
run;

data final_training_data; set total_data;
	if _n_ > 287043 then delete;
run;

proc export data=final_training_data
    outfile='W:\tip_prediction\final_training_data.csv' 
    dbms=csv
    replace;
run;


data final_testing_data; set total_data;
	if _n_ <= 287043 then delete;
run;


proc export data=final_testing_data
    outfile='W:\tip_prediction\final_testing_data.csv'
    dbms=csv
    replace;
run;
*/


